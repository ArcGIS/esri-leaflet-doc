---
title: Non-mercator projection
description: Using non mercator tiles with <code>L.esri.TiledMapLayer</code> with the <a href="https://github.com/kartena/Proj4Leaflet">Proj4Leaflet</a> plugin. <br><br> <strong>This demo should be implemented at your own risk. Esri Leaflet only supports tiles that have been published in Web Mercator Auxiliary Sphere tiling scheme (WKID 102100/3857). Strong knowledge of projections, spatial references and tiling schemes is required for this.</strong>
layout: example.hbs
---

<!-- Include Proj4JS via rawgit.com
in production you'd be better off hosting these libraries yourself -->
<script src="https://rawgit.com/proj4js/proj4js/2.3.12/dist/proj4-src.js"></script>
<script src="https://rawgit.com/kartena/Proj4Leaflet/1.0.0-beta.1/src/proj4leaflet.js"></script>

<!-- Load shapeMarkers from CDN -->
<script src="https://cdn.jsdelivr.net/leaflet.shapemarkers/1.0.4/leaflet-shape-markers.js"></script>

<div id="map"></div>

<script>
  /* create new Proj4Leaflet CRS:
  1. Proj4 and WKT definitions can be found at sites like http://epsg.io, http://spatialreference.org/ or by using gdalsrsinfo http://www.gdal.org/gdalsrsinfo.html
  2. Appropriate values to supply to the resolution and origin constructor options can be found in the ArcGIS Server RESTful tile server endpoint (ex: http://mapserv.utah.gov/arcgis/rest/services/BaseMaps/Terrain/MapServer)
  3. The numeric code within the first parameter (ex: `26912`) will be used to project the dynamic map layer on the fly
  */
  var crs = new L.Proj.CRS('EPSG:54009', '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs', {
    origin: [-19844104.7157449, 29766157.3486128],
    resolutions: [
      66145.9656252646,
      33072.9828126323,
      16933.3672000677,
      8466.68360003387
    ]
  });

  var map = L.map('map', {
    crs: crs
  }).setView([0,0], 1);

  // The min/maxZoom values provided should match the actual cache thats been published. This information can be retrieved from the service endpoint directly.
  L.esri.tiledMapLayer({
    url: 'http://maverick.arcgis.com/ArcGIS/rest/services/World_Mollweide/MapServer',
    maxZoom: 3,
    minZoom: 1,
    continuousWorld: true
  }).addTo(map);

  // feature layers will be requested in WGS84 (4326) and reprojected on the client
  var cities = L.esri.featureLayer({
    url: 'http://sampleserver6.arcgisonline.com/arcgis/rest/services/WorldTimeZones/MapServer/0',
    where: 'POP_RANK < 3',
    pointToLayer (geojson, latlng) {
      return L.shapeMarkers.diamondMarker(latlng, 5, {
        color: '#0099FF',
        weight: 2
      })
    }
  }).addTo(map);
</script>
